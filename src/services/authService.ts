import type {
  User,
  LoginCredentials,
  RegisterVendedorData,
  AuthResponse,
  ApiResponse,
} from "../shared/types";

// Mock users data
const MOCK_USERS: User[] = [
  {
    id: "1",
    nombre: "Admin",
    apellido: "Sistema",
    documentoIdentidad: "12345678",
    celular: "+573001234567",
    fechaNacimiento: "1990-01-01",
    correo: "admin@hogar360.com",
    rol: "admin",
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-01T00:00:00Z",
  },
  {
    id: "2",
    nombre: "Carlos",
    apellido: "Vendedor",
    documentoIdentidad: "87654321",
    celular: "+573009876543",
    fechaNacimiento: "1985-05-15",
    correo: "vendedor@hogar360.com",
    rol: "vendedor",
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-01T00:00:00Z",
  },
  {
    id: "3",
    nombre: "Ana",
    apellido: "Compradora",
    documentoIdentidad: "11223344",
    celular: "+573005556677",
    fechaNacimiento: "1992-08-20",
    correo: "comprador@hogar360.com",
    rol: "comprador",
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-01T00:00:00Z",
  },
  // Usuarios vendedores adicionales por defecto
  {
    id: "vendedor-1",
    nombre: "Carlos",
    apellido: "Rodríguez",
    documentoIdentidad: "87654322",
    celular: "+573009876544",
    fechaNacimiento: "1985-05-15",
    correo: "carlos.rodriguez@hogar360.com",
    rol: "vendedor",
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-01T00:00:00Z",
  },
  {
    id: "vendedor-2",
    nombre: "María",
    apellido: "González",
    documentoIdentidad: "11223345",
    celular: "+573005556678",
    fechaNacimiento: "1992-08-20",
    correo: "maria.gonzalez@hogar360.com",
    rol: "vendedor",
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-01T00:00:00Z",
  },
  {
    id: "vendedor-3",
    nombre: "Juan",
    apellido: "Pérez",
    documentoIdentidad: "99887766",
    celular: "+573007778899",
    fechaNacimiento: "1988-03-10",
    correo: "juan.perez@hogar360.com",
    rol: "vendedor",
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-01T00:00:00Z",
  },
  {
    id: "vendedor-4",
    nombre: "Ana",
    apellido: "López",
    documentoIdentidad: "55443322",
    celular: "+573002223333",
    fechaNacimiento: "1995-12-05",
    correo: "ana.lopez@hogar360.com",
    rol: "vendedor",
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-01T00:00:00Z",
  },
  {
    id: "vendedor-5",
    nombre: "Diego",
    apellido: "Martínez",
    documentoIdentidad: "66778899",
    celular: "+573004445555",
    fechaNacimiento: "1991-07-22",
    correo: "diego.martinez@hogar360.com",
    rol: "vendedor",
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-01T00:00:00Z",
  },
  {
    id: "vendedor-6",
    nombre: "Patricia",
    apellido: "Herrera",
    documentoIdentidad: "33445566",
    celular: "+573006667777",
    fechaNacimiento: "1987-11-18",
    correo: "patricia.herrera@hogar360.com",
    rol: "vendedor",
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-01T00:00:00Z",
  },
  {
    id: "vendedor-7",
    nombre: "Roberto",
    apellido: "Silva",
    documentoIdentidad: "77889900",
    celular: "+573008889999",
    fechaNacimiento: "1993-04-12",
    correo: "roberto.silva@hogar360.com",
    rol: "vendedor",
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-01T00:00:00Z",
  },
  {
    id: "vendedor-8",
    nombre: "Lucía",
    apellido: "Torres",
    documentoIdentidad: "44556677",
    celular: "+573001112222",
    fechaNacimiento: "1989-09-30",
    correo: "lucia.torres@hogar360.com",
    rol: "vendedor",
    createdAt: "2024-01-01T00:00:00Z",
    updatedAt: "2024-01-01T00:00:00Z",
  },
];

// Mock passwords (in real app, these would be hashed)
const MOCK_PASSWORDS: Record<string, string> = {
  "admin@hogar360.com": "admin123",
  "vendedor@hogar360.com": "vendedor123",
  "comprador@hogar360.com": "comprador123",
  // Usuarios vendedores por defecto
  "carlos.rodriguez@hogar360.com": "carlos123",
  "maria.gonzalez@hogar360.com": "maria123",
  "juan.perez@hogar360.com": "juan123",
  "ana.lopez@hogar360.com": "ana123",
  "diego.martinez@hogar360.com": "diego123",
  "patricia.herrera@hogar360.com": "patricia123",
  "roberto.silva@hogar360.com": "roberto123",
  "lucia.torres@hogar360.com": "lucia123",
};

class AuthService {
  private delay(ms: number = 1000): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  private generateToken(user: User): string {
    // Mock JWT token (in real app, this would be generated by backend)
    return `mock_token_${user.id}_${Date.now()}`;
  }

  async login(
    credentials: LoginCredentials
  ): Promise<ApiResponse<AuthResponse>> {
    await this.delay(800);

    const { correo, clave } = credentials;

    // Find user by email
    const user = MOCK_USERS.find((u) => u.correo === correo);

    if (!user) {
      throw new Error("Usuario no encontrado");
    }

    // Validate password
    const expectedPassword = MOCK_PASSWORDS[correo];
    if (clave !== expectedPassword) {
      throw new Error("Contraseña incorrecta");
    }

    const token = this.generateToken(user);

    return {
      data: {
        user,
        token,
      },
      message: "Inicio de sesión exitoso",
      success: true,
    };
  }

  async register(
    userData: RegisterVendedorData
  ): Promise<ApiResponse<AuthResponse>> {
    await this.delay(1000);

    // Validate if user already exists
    const existingUser = MOCK_USERS.find((u) => u.correo === userData.correo);
    if (existingUser) {
      throw new Error("El usuario ya existe");
    }

    // Validate document ID doesn't exist
    const existingDocument = MOCK_USERS.find(
      (u) => u.documentoIdentidad === userData.documentoIdentidad
    );
    if (existingDocument) {
      throw new Error("El documento de identidad ya está registrado");
    }

    // Validate age (must be 18+)
    const birthDate = new Date(userData.fechaNacimiento);
    const today = new Date();
    const age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();

    if (age < 18 || (age === 18 && monthDiff < 0)) {
      throw new Error("Debe ser mayor de edad");
    }

    // Create new user
    const newUser: User = {
      id: (MOCK_USERS.length + 1).toString(),
      nombre: userData.nombre,
      apellido: userData.apellido,
      documentoIdentidad: userData.documentoIdentidad,
      celular: userData.celular,
      fechaNacimiento: userData.fechaNacimiento,
      correo: userData.correo,
      rol: "vendedor", // Always vendedor as per HU#5
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
    };

    // Add to mock data
    MOCK_USERS.push(newUser);
    MOCK_PASSWORDS[userData.correo] = userData.clave;

    const token = this.generateToken(newUser);

    return {
      data: {
        user: newUser,
        token,
      },
      message: "Registro exitoso",
      success: true,
    };
  }

  async logout(): Promise<ApiResponse<null>> {
    await this.delay(300);

    return {
      data: null,
      message: "Sesión cerrada exitosamente",
      success: true,
    };
  }

  async getProfile(token: string): Promise<ApiResponse<User>> {
    await this.delay(500);

    // Extract user ID from mock token
    const tokenParts = token.split("_");
    if (
      tokenParts.length < 3 ||
      tokenParts[0] !== "mock" ||
      tokenParts[1] !== "token"
    ) {
      throw new Error("Token inválido");
    }

    const userId = tokenParts[2];
    const user = MOCK_USERS.find((u) => u.id === userId);

    if (!user) {
      throw new Error("Usuario no encontrado");
    }

    return {
      data: user,
      message: "Perfil obtenido exitosamente",
      success: true,
    };
  }

  // Helper method to validate token
  validateToken(token: string): boolean {
    const tokenParts = token.split("_");
    return (
      tokenParts.length >= 3 &&
      tokenParts[0] === "mock" &&
      tokenParts[1] === "token"
    );
  }

  // Helper method to get user from token
  getUserFromToken(token: string): User | null {
    if (!this.validateToken(token)) {
      return null;
    }

    const tokenParts = token.split("_");
    const userId = tokenParts[2];
    return MOCK_USERS.find((u) => u.id === userId) || null;
  }
}

export const authService = new AuthService();
